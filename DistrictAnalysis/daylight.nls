;;tests for daylight indicator calculation

;;patches need owned-variable height
;;import from raster data? first directly from layer
;;patches are spatial discretisation (not more, so need to be precise)


to calculate-sunlight-index
  ;;set heights of buildings
  ;;simplified : all same height, would need attribute file
  set-heights
  
  ;;set sun positions
  set-sun-positions
  
  ;;angle interval will be tick time
  set angle-time-interval round ((length theta) / 24)
  
  let objectives objective-points
  
  ;;more simple to first integrate on space then in time,
  ;;so we take p=1 in the norm so no interversion pb
  let tot 0 let s 0
  repeat round (24 / angle-time-interval) [
     if first theta > 0 [
       clear-drawing
       gis:draw paths-layer-data 1
       output-print word "Hour " ((tot * angle-time-interval) + 1)
       set s s + daylight-value list (first theta) (first phi) objectives
       set tot tot + 1
     ]
     
     set theta but-first theta
     set phi but-first phi
  ]
  
  set sunlight-index s / tot
  
end


;;reporter for a given sun position
;;position as a couple (theta,phi)
to-report daylight-value [sun-position points]
  let enl 0
  foreach points [
     set enl enl + local-daylight-value sun-position ?
  ]
  report enl / length points
end

to-report local-daylight-value [sun-position point]
  ;;implementation : a turtle goes in theta direction
  ;;checks at each step (1?) if l*sin(theta) > local-height
  ;;in a way, turtle is one photon !
  let photon nobody let light? true let l 0 let th first sun-position
  create-turtles 1 [setxy first point last point set heading last sun-position set photon self set color yellow pen-down]
  ask photon [
     while [can-move? 1][
       if l > 0 [set light? (light? and (l * scale-factor * tan th ) > [height] of patch-here) ]
       set l l + 1
       fd 1
     ]
     die
  ]
  ifelse light? [report 1][report 0]
end




to set-heights
  ask patches [set pcolor black set height 0]
;  ask buildings [
;    let env gis:envelope-of gis-shape
;    let xmin first env let xmax first but-first env
;    let ymin first but-first but-first env let ymax first but-first but-first but-first env
;    let i 0 let j 0
;    repeat (xmax - xmin) [repeat (ymax - ymin)[let p patch (xmin + i) (ymin + j) if p != nobody [ if gis:contains? gis-shape p or gis:intersects? gis-shape p [ask p [set height 30]]] set j j + 1] set i i + 1 set j 0]
;  ]
;  show "ok"
  ask buildings [ask patches with [gis:intersects? [gis-shape] of myself self or gis:contains? [gis-shape] of myself self] [set height 30 set pcolor white]]
end


to set-sun-positions
  ;;read from file
  ;;values of angles every hour
  set theta map read-from-string read-file "thetaSW.txt"
  set phi map read-from-string read-file "phiSW.txt"
  
  
end



to-report objective-points
  ;;dirty : for each discontinuity between two patches, add a column of windows? :/
  
  let res []
  
  ask patches [
    ask neighbors4[
       if height - [height] of myself != 0 [set res lput list (([pxcor] of myself + pxcor) / 2) (([pycor] of myself + pycor) / 2) res]
    ]
  ]
  
  report res
end